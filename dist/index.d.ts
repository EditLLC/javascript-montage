declare module 'montagedata' {
    /** Declaration file generated by dts-gen */

    export class Client {
        constructor(project: any, token?: any);
        authenticate(email: any, password: any): any;
        execute(queries: any): any;
        request(endpoint: any, method: any, data: any, file: any): any;
        url(endpoint: any): any;
        user(): any;
        documents: any;
    }
    export class Field {
        constructor(field: any);
        contains(value: any): any;
        ends(value: any): any;
        eq(value: any): any;
        ge(value: any): any;
        gt(value: any): any;
        iends(value: any): any;
        ieq(value: any): any;
        inSet(...args: any[]): any;
        includes(value: any): any;
        intersects(value: any): any;
        istarts(value: any): any;
        le(value: any): any;
        lt(value: any): any;
        ne(value: any): any;
        regex(expression: any): any;
        starts(value: any): any;
        toJS(): any;
    }
    export class Query {
        constructor(schema: any);
        avg(field: any): any;
        between(start: any, end: any, index: any): any;
        count(): any;
        filter(...args: any[]): any;
        get(id: any): any;
        getAll(ids: any, ...args: any[]): any;
        getIntersecting(geometry: any, index: any): any;
        getNearest(geometry: any, index: any): any;
        group(field: any): any;
        hasFields(...args: any[]): any;
        limit(num: any): any;
        max(field: any): any;
        min(field: any): any;
        nth(num: any): any;
        orderBy(field: any, ordering?: any): any;
        pluck(...args: any[]): any;
        sample(num: any): any;
        skip(num: any): any;
        slice(start: any, end: any): any;
        sum(field: any): any;
        toJS(): any;
        withFields(...args: any[]): any;
        without(...args: any[]): any;
    }
}
